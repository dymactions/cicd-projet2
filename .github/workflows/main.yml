name: CI/CD workflow  !
on: push
env:
  SERVER_PRODUCTION_IP: "141.95.149.180"
  SERVER_STAGING_IP: "51.195.44.163"
  SERVER_USER: root

jobs:
  tests-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit --audit-level=moderate

  tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-api
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: ./node-api/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit --audit-level=moderate
      - name: exec units tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-frontend-and-node-api:
    needs: [tests-frontend, tests-backend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - context_name: ./frontend
            image_name: ghcr.io/dymactions/cicd-projet2/frontend:latest
          - context_name: ./node-api
            image_name: ghcr.io/dymactions/cicd-projet2/node-api:latest
    permissions:
      packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context_name }}
          push: true
          tags: ${{ matrix.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    needs: [build-frontend-and-node-api]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: lancement des tests e2e
        run: |
          docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: clean
        run: |
          docker compose down -v --remove-orphans

  deploy-staging:
    needs: e2e
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: http://${{ env.SERVER_STAGING_IP }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: deployer sur le serveur de staging
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.VPS_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_STAGING_IP }} >> ~/.ssh/known_hosts
          scp docker-compose.production.yml ${{ env.SERVER_USER }}@${{ env.SERVER_STAGING_IP }}:/root/docker-compose.production.yml
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_STAGING_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_STAGING_IP }} "docker compose -f /root/docker-compose.production.yml up -d --force-recreate"

  deploy-production:
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://${{ env.SERVER_PRODUCTION_IP }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: deployer sur le serveur de production
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.VPS_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
          scp docker-compose.production.yml ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION_IP }}:/root/docker-compose.production.yml
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker compose -f /root/docker-compose.production.yml up -d --force-recreate"
